import { call, put, takeLatest, delay, select, all } from 'redux-saga/effects';
import { toast } from 'react-hot-toast';
import type { PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '@/store';
import {
  loginUser,
  registerUser,
  logoutUser,
  loadUserProfile,
  updateUserProfile,
} from './userSlice';
import type { LoginForm, RegisterForm, UserProfile } from '@/types';

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const selectCurrentUser = (state: RootState): UserProfile | null =>
  state.user.data;

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º, —á—Ç–æ –≤ Login.tsx)
const TEST_USERS = [
  {
    id: '1',
    email: 'admin@example.com',
    password: 'admin123',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    role: 'admin' as const,
    avatar: 'üë®‚Äçüíº',
  },
  {
    id: '2',
    email: 'manager@example.com',
    password: 'manager123',
    name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    role: 'manager' as const,
    avatar: 'üë©‚Äçüíº',
  },
  {
    id: '3',
    email: 'user@example.com',
    password: 'user123',
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    role: 'user' as const,
    avatar: 'üë§',
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–∞
const apiRequest = async (_endpoint: string, data?: unknown) => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  await new Promise(resolve =>
    setTimeout(resolve, 1000 + Math.random() * 1000)
  );

  // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ (5% —Å–ª—É—á–∞–µ–≤)
  if (Math.random() < 0.05) {
    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
  }

  return { success: true, data };
};

// Saga –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function* loginUserSaga(
  action: PayloadAction<LoginForm>
): Generator<unknown, void, unknown> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!action.payload || !action.payload.email || !action.payload.password) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ saga
      // –ü—É—Å—Ç—å async thunk –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ
      return;
    }

    const { email, password } = action.payload;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    toast.loading('–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...', { id: 'login' });

    // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    yield call(apiRequest, '/auth/login', { email, password });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUser = TEST_USERS.find(
      user => user.email === email && user.password === password
    );

    if (testUser) {
      const user: UserProfile = {
        id: testUser.id,
        email: testUser.email,
        name: testUser.name,
        role: testUser.role,
        avatar: testUser.avatar,
        preferences: {
          theme: 'light',
          language: 'ru',
          notifications: true,
        },
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
      localStorage.setItem('authToken', `demo-token-${testUser.id}`);
      localStorage.setItem('user', JSON.stringify(user));

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      yield delay(500);

      // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      yield put(loginUser.fulfilled(user, '', action.payload));

      toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!', { id: 'login' });
    } else {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';

    // –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(
      loginUser.rejected(error as Error, '', action.payload, errorMessage)
    );

    toast.error(errorMessage, { id: 'login' });
  }
}

// Saga –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function* registerUserSaga(
  action: PayloadAction<RegisterForm>
): Generator<unknown, void, unknown> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (
      !action.payload ||
      !action.payload.email ||
      !action.payload.password ||
      !action.payload.name
    ) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ saga
      // –ü—É—Å—Ç—å async thunk –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ
      return;
    }

    const { name, email, password, confirmPassword } = action.payload;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    toast.loading('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...', { id: 'register' });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (password !== confirmPassword) {
      throw new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }

    if (password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    yield call(apiRequest, '/auth/register', { name, email, password });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user: UserProfile = {
      id: Date.now().toString(),
      email,
      name,
      role: 'user',
      preferences: {
        theme: 'light',
        language: 'ru',
        notifications: true,
      },
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
    localStorage.setItem('authToken', 'demo-token-123');
    localStorage.setItem('user', JSON.stringify(user));

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    yield delay(800);

    // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(registerUser.fulfilled(user, '', action.payload));

    toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', { id: 'register' });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';

    // –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(
      registerUser.rejected(error as Error, '', action.payload, errorMessage)
    );

    toast.error(errorMessage, { id: 'register' });
  }
}

// Saga –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function* logoutUserSaga(): Generator<unknown, void, unknown> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = (yield select(selectCurrentUser)) as UserProfile | null;

    if (currentUser) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.loading('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...', { id: 'logout' });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã—Ö–æ–¥–∞
      yield call(apiRequest, '/auth/logout');

      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      localStorage.removeItem('authToken');
      localStorage.removeItem('user');

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      yield delay(300);

      // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      yield put(logoutUser.fulfilled(null, '', undefined));

      toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', { id: 'logout' });
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      yield put(logoutUser.fulfilled(null, '', undefined));
    }
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞';

    // –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(logoutUser.rejected(error as Error, '', undefined, errorMessage));

    toast.error(errorMessage, { id: 'logout' });
  }
}

// Saga –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function* loadUserProfileSaga(): Generator<unknown, void, unknown> {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    toast.loading('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...', { id: 'loadProfile' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('authToken');
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    yield call(apiRequest, '/auth/profile');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    const userData = localStorage.getItem('user');
    if (!userData) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    const user = JSON.parse(userData) as UserProfile;

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    yield delay(500);

    // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(loadUserProfile.fulfilled(user, '', undefined));

    toast.success('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω', { id: 'loadProfile' });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è';

    // –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(
      loadUserProfile.rejected(error as Error, '', undefined, errorMessage)
    );

    toast.error(errorMessage, { id: 'loadProfile' });
  }
}

// Saga –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function* updateUserProfileSaga(
  action: PayloadAction<Partial<UserProfile>>
): Generator<unknown, void, unknown> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!action.payload) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ saga
      // –ü—É—Å—Ç—å async thunk –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ
      return;
    }

    const updates = action.payload;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    toast.loading('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...', { id: 'updateProfile' });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = (yield select(selectCurrentUser)) as UserProfile | null;

    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    yield call(apiRequest, '/auth/profile', updates);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedUser: UserProfile = {
      ...currentUser,
      ...updates,
      id: updates.id || currentUser.id,
      email: updates.email || currentUser.email,
      name: updates.name || currentUser.name,
      role: updates.role || currentUser.role,
      preferences: updates.preferences || currentUser.preferences,
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('user', JSON.stringify(updatedUser));

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    yield delay(600);

    // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(updateUserProfile.fulfilled(updatedUser, '', action.payload));

    toast.success('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', { id: 'updateProfile' });
  } catch (error) {
    const errorMessage =
      error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è';

    // –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    yield put(
      updateUserProfile.rejected(
        error as Error,
        '',
        action.payload,
        errorMessage
      )
    );

    toast.error(errorMessage, { id: 'updateProfile' });
  }
}

// Saga –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function* initializeUserSaga() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('authToken');
    if (token) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      yield put(loadUserProfile());
    }
  } catch (error) {
    // –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    toast.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –ö–æ—Ä–Ω–µ–≤–∞—è saga –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function* userSaga() {
  yield all([
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    call(initializeUserSaga),

    // –°–ª—É—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    takeLatest(loginUser.pending.type, loginUserSaga),
    takeLatest(registerUser.pending.type, registerUserSaga),
    takeLatest(logoutUser.pending.type, logoutUserSaga),
    takeLatest(loadUserProfile.pending.type, loadUserProfileSaga),
    takeLatest(updateUserProfile.pending.type, updateUserProfileSaga),
  ]);
}
